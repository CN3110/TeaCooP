import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowBack } from '@mui/icons-material';
import {
  Card, Typography, Button, Grid, CircularProgress, TextField, Pagination
} from '@mui/material';
import { Clear, PictureAsPdf } from '@mui/icons-material';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import axios from 'axios';
import moment from 'moment';
import EmployeeLayout from '../../../components/EmployeeLayout/EmployeeLayout.jsx';
import AdminLayout from '../../../components/AdminLayout/AdminLayout.jsx';

const TeaPacketReport = () => {
  const [allPackets, setAllPackets] = useState([]);
  const [filteredPackets, setFilteredPackets] = useState([]);
  const [summary, setSummary] = useState({});
  const [loading, setLoading] = useState(false);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 10;

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    filterPacketsByDate();
    setCurrentPage(1); // Reset page when filter changes
  }, [startDate, endDate, allPackets]);

  const fetchData = async () => {
    setLoading(true);
    try {
      const packetsRes = await axios.get('http://localhost:3001/api/tea-packets');
      const summaryRes = await axios.get('http://localhost:3001/api/tea-packets/available');

      setAllPackets(packetsRes.data.data || []);
      setSummary(summaryRes.data || {});
    } catch (err) {
      console.error('Error fetching data:', err);
    } finally {
      setLoading(false);
    }
  };

  const filterPacketsByDate = () => {
    if (!startDate || !endDate) {
      setFilteredPackets(allPackets);
      return;
    }

    const filtered = allPackets.filter(packet => {
      const date = moment(packet.productionDate);
      return date.isBetween(moment(startDate), moment(endDate), undefined, '[]');
    });

    setFilteredPackets(filtered);
  };

  const generatePDF = () => {
  const doc = new jsPDF();
  const userId = localStorage.getItem('userId') || 'Unknown';
  const timestamp = moment().format('YYYY-MM-DD HH:mm:ss');

  doc.setFontSize(16);
  doc.text('Tea Packet Summary Report', 14, 20);

  if (startDate && endDate) {
    doc.setFontSize(12);
    doc.text(`Filtered From: ${startDate} To: ${endDate}`, 14, 30);
  }

  // Summary Table
  doc.autoTable({
    startY: 36,
    head: [['Allocated for Packets (5%)', 'Total Used for Packets', 'Available for Packets']],
    body: [[
      `${summary.allocatedForPackets || 0} kg`,
      `${summary.totalUsedForPackets || 0} kg`,
      `${summary.availableForPackets?.toFixed(2) || 0} kg`
    ]],
    theme: 'grid',
    headStyles: { fillColor: [22, 160, 133] },
  });

  // Detailed Table
  const tableData = filteredPackets.map(p => {
    const remaining = (p.sourceMadeTeaWeight - (p.numberOfPackets * p.packetWeight)).toFixed(2);
    return [
      moment(p.productionDate).format('YYYY-MM-DD'),
      `${p.sourceMadeTeaWeight} kg`,
      `${p.packetWeight} kg`,
      p.numberOfPackets,
      `${remaining} kg`,
      p.employeeName || 'N/A',
      moment(p.createdAt).format('YYYY-MM-DD HH:mm')
    ];
  });

  doc.autoTable({
    startY: doc.lastAutoTable.finalY + 10,
    head: [['Production Date', 'Source Weight', 'Packet Weight', 'No. of Packets', 'Remaining Weight', 'Created By', 'Created At']],
    body: tableData,
    theme: 'striped',
    headStyles: { fillColor: [33, 150, 243] },
    styles: {
      fontSize: 10,
      cellPadding: 2,
    },
    didDrawPage: (data) => {
      // Footer with page number
      const pageSize = doc.internal.pageSize;
      const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();
      doc.setFontSize(10);
      doc.setTextColor(100);

      doc.text(`Report generated by: ${userId}`, 14, pageHeight - 20);
      doc.text(`Generated at: ${timestamp}`, 14, pageHeight - 15);
      doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageSize.width - 40, pageHeight - 10);
    }
  });

  doc.save(`Tea_Packet_Report_${moment().format('YYYYMMDD_HHmmss')}.pdf`);
};

  const indexOfLastRecord = currentPage * recordsPerPage;
  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
  const currentPackets = filteredPackets.slice(indexOfFirstRecord, indexOfLastRecord);
  const totalPages = Math.ceil(filteredPackets.length / recordsPerPage);

    const navigate = useNavigate();

    
const userRole = localStorage.getItem('userRole');
const Layout = userRole === 'admin' ? AdminLayout : EmployeeLayout;

  return (
    <Layout>
      <div style={{ padding: 20 }}>
         <Button 
  variant="outlined" 
  color="primary" 
  startIcon={<ArrowBack />}
  onClick={() => navigate('/report-dashboard')}
>
  Back
</Button>
        <Typography variant="h5" gutterBottom>
          Tea Packet Report
        </Typography>

        {loading ? (
          <CircularProgress />
        ) : (
          <>
            {/* Summary Cards */}
            <Grid container spacing={2} style={{ marginBottom: 16 }}>
              <Grid item xs={12} sm={4}>
                <Card style={{ padding: 16 }}>
                  <Typography variant="subtitle2">Allocated for Packets (5%)</Typography>
                  <Typography variant="h6">{summary.allocatedForPackets} kg</Typography>
                </Card>
              </Grid>
              <Grid item xs={12} sm={4}>
                <Card style={{ padding: 16 }}>
                  <Typography variant="subtitle2">Total Used for Packets</Typography>
                  <Typography variant="h6">{summary.totalUsedForPackets} kg</Typography>
                </Card>
              </Grid>
              <Grid item xs={12} sm={4}>
                <Card style={{ padding: 16 }}>
                  <Typography variant="subtitle2">Available for Packets</Typography>
                  <Typography
                    variant="h6"
                    color={summary.availableForPackets > 0 ? 'green' : 'error'}
                  >
                    {summary.availableForPackets?.toFixed(2)} kg
                  </Typography>
                </Card>
              </Grid>
            </Grid>

            {/* Date Filters */}
            <Grid container spacing={2} style={{ marginBottom: 16 }}>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  label="Start Date"
                  type="date"
                  InputLabelProps={{ shrink: true }}
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  label="End Date"
                  type="date"
                  InputLabelProps={{ shrink: true }}
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                />
              </Grid>
              <Grid item xs={6} sm={2}>
                <Button
                  fullWidth
                  variant="outlined"
                  color="secondary"
                  startIcon={<Clear />}
                  style={{ height: '100%' }}
                  onClick={() => {
                    setStartDate('');
                    setEndDate('');
                  }}
                >
                  Clear
                </Button>
              </Grid>
              <Grid item xs={6} sm={2}>
                <Button
                  fullWidth
                  variant="contained"
                  color="primary"
                  startIcon={<PictureAsPdf />}
                  style={{ height: '100%' }}
                  onClick={generatePDF}
                  disabled={filteredPackets.length === 0}
                >
                  PDF
                </Button>
              </Grid>
            </Grid>

            {/* Total records count */}
            <p className="mt-3">
              {filteredPackets.length} record(s) displayed.
            </p>

            {/* Table Section */}
            <div className="card mb-4">
              <div className="card-body">
                <h5 className="card-title">Packet Details Table View</h5>
                <div className="table-responsive">
                  <table className="table table-bordered table-hover">
                    <thead className="table-light">
                      <tr>
                        <th>Production Date</th>
                        <th>Source Weight (kg)</th>
                        <th>Packet Weight (kg)</th>
                        <th>No. of Packets</th>
                        <th>Remaining Weight (kg)</th>
                        <th>Created By</th>
                        <th>Created At</th>
                      </tr>
                    </thead>
                    <tbody>
                      {currentPackets.length > 0 ? (
                        currentPackets.map((p, index) => {
                          const remaining = (
                            p.sourceMadeTeaWeight -
                            p.numberOfPackets * p.packetWeight
                          ).toFixed(2);
                          return (
                            <tr key={index}>
                              <td>{moment(p.productionDate).format('YYYY-MM-DD')}</td>
                              <td>{p.sourceMadeTeaWeight} kg</td>
                              <td>{p.packetWeight} kg</td>
                              <td>{p.numberOfPackets}</td>
                              <td>{remaining} kg</td>
                              <td>{p.employeeName || 'N/A'}</td>
                              <td>{moment(p.createdAt).format('YYYY-MM-DD HH:mm')}</td>
                            </tr>
                          );
                        })
                      ) : (
                        <tr>
                          <td colSpan="7" className="text-center p-3">
                            No records found for selected dates.
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <Pagination
                count={totalPages}
                page={currentPage}
                onChange={(event, value) => setCurrentPage(value)}
                color="primary"
                style={{ marginTop: '1rem', display: 'flex', justifyContent: 'center' }}
              />
            )}
          </>
        )}
      </div>
    </Layout>
  );
};

export default TeaPacketReport;
