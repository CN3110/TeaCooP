import React, { useEffect, useState } from "react";
import { useNavigate } from 'react-router-dom';
import { ArrowBack } from '@mui/icons-material';
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";
import {
  Button,
  Snackbar,
  Alert,
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
} from "@mui/material";
import {
  FilterList,
  Clear,
  PictureAsPdf,
  GridOn,
} from "@mui/icons-material";
import EmployeeLayout from "../../../components/EmployeeLayout/EmployeeLayout";

const SoldLotsReport = () => {
  const [lots, setLots] = useState([]);
  const [brokers, setBrokers] = useState([]);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [brokerFilter, setBrokerFilter] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 10;
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "info",
  });

  const fetchData = async () => {
    try {
      if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
        showSnackbar("Start date cannot be after end date", "warning");
        return;
      }

      const queryParams = new URLSearchParams();
      if (startDate) queryParams.append("startDate", startDate);
      if (endDate) queryParams.append("endDate", endDate);
      if (brokerFilter) queryParams.append("brokerId", brokerFilter);

      const response = await fetch(
        `http://localhost:3001/api/reports/sold-lots?${queryParams}`
      );
      const data = await response.json();
      setLots(data);
      showSnackbar(`${data.length} record(s) found`, "success");
    } catch (error) {
      console.error("Error fetching report:", error);
      showSnackbar("Failed to fetch report data", "error");
    }
  };

  const fetchBrokers = async () => {
    try {
      const res = await fetch("http://localhost:3001/api/brokers");
      const data = await res.json();
      setBrokers(data);
    } catch (err) {
      console.error("Error fetching brokers:", err);
      showSnackbar("Failed to fetch brokers", "error");
    }
  };

  useEffect(() => {
    fetchData();
    fetchBrokers();
  }, []);

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  const handleFilter = () => {
    fetchData();
    setCurrentPage(1);
  };

  const clearFilters = () => {
    setStartDate("");
    setEndDate("");
    setBrokerFilter("");
    fetchData();
    setCurrentPage(1);
    showSnackbar("Filters cleared", "info");
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    const userId = localStorage.getItem("userId") || "Unknown";
    const generationTime = new Date().toLocaleString();

    const headers = [
      [
        "Lot Number",
        "Tea Type",
        "Weight",
        "Employee Valuation",
        "Broker Valuation",
        "Sold Price",
        "Total Price",
        "Sold Date",
        "Broker Name",
        "Company",
      ],
    ];

    const rows = lots.map((lot) => [
      lot.lotNumber || "-",
      lot.teaTypeName || "-",
      `${lot.totalNetWeight || 0} kg`,
      `Rs. ${lot.employeeValuationPrice || 0}`,
      `Rs. ${lot.brokerValuationPrice || 0}`,
      `Rs. ${lot.soldPrice || 0}`,
      `Rs. ${lot.total_sold_price || 0}`,
      lot.soldDate ? new Date(lot.soldDate).toLocaleDateString() : "-",
      lot.brokerName || "-",
      lot.brokerCompany || "-",
    ]);

    const filtersText = `Filters - Start Date: ${startDate || "None"}, End Date: ${
      endDate || "None"
    }, Broker: ${
      brokerFilter
        ? brokers.find((b) => b.brokerId === brokerFilter)?.brokerName || "All"
        : "All"
    }`;

    doc.setFontSize(14);
    doc.setTextColor(0, 102, 0);
    doc.text("Sold Lots Report", 14, 15);
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    doc.text(filtersText, 14, 22);

    autoTable(doc, {
      startY: 28,
      head: headers,
      body: rows,
      styles: { fontSize: 9 },
      headStyles: {
        fillColor: [0, 102, 0],
        textColor: 255,
        fontStyle: "bold",
      },
      alternateRowStyles: {
        fillColor: [240, 255, 240],
      },
      didDrawPage: (data) => {
        const pageCount = doc.internal.getNumberOfPages();
        const pageSize = doc.internal.pageSize;
        const pageHeight = pageSize.height || pageSize.getHeight();

        doc.setFontSize(9);
        doc.text(
          `Page ${doc.internal.getCurrentPageInfo().pageNumber} of ${pageCount}`,
          data.settings.margin.left,
          pageHeight - 10
        );
        doc.text(
          `Generated by: ${userId}`,
          data.settings.margin.left + 80,
          pageHeight - 10
        );
        doc.text(
          `Generated on: ${generationTime}`,
          data.settings.margin.left + 140,
          pageHeight - 10
        );
      },
    });

    doc.save(`SoldLotsReport_${generationTime.replace(/[/:, ]/g, "_")}.pdf`);
    showSnackbar("PDF exported successfully", "success");
  };

  const exportToExcel = () => {
    const generationTime = new Date().toLocaleString();
    const worksheetData = lots.map((lot) => ({
      "Lot Number": lot.lotNumber || "-",
      "Tea Type": lot.teaTypeName || "-",
      "Weight (kg)": lot.totalNetWeight || 0,
      "Employee Valuation": lot.employeeValuationPrice || 0,
      "Broker Valuation": lot.brokerValuationPrice || 0,
      "Sold Price": lot.soldPrice || 0,
      "Total Sold Price": lot.total_sold_price || 0,
      "Sold Date": lot.soldDate ? new Date(lot.soldDate).toLocaleDateString() : "-",
      "Broker Name": lot.brokerName || "-",
      "Company": lot.brokerCompany || "-",
    }));

    const worksheet = XLSX.utils.json_to_sheet(worksheetData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Sold Lots");

    XLSX.writeFile(workbook, `SoldLotsReport_${generationTime.replace(/[/:, ]/g, "_")}.xlsx`);
    showSnackbar("Excel exported successfully", "success");
  };

  // Pagination logic
  const indexOfLastRecord = currentPage * recordsPerPage;
  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
  const currentRecords = lots.slice(indexOfFirstRecord, indexOfLastRecord);
  const totalPages = Math.ceil(lots.length / recordsPerPage);

  const navigate = useNavigate();

  return (
    <EmployeeLayout>
      <div className="container mt-4 mb-5">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <Button 
  variant="outlined" 
  color="primary" 
  startIcon={<ArrowBack />}
  onClick={() => navigate('/report-dashboard')}
>
  Back
</Button>
          <h2 className="mb-0 text-success">Sold Lots Management</h2>
          <div className="d-flex gap-2">
            <Button
              variant="contained"
              color="error"
              onClick={generatePDF}
              startIcon={<PictureAsPdf />}
            >
              Export PDF
            </Button>
            <Button
              variant="contained"
              style={{ backgroundColor: "#217346", color: "white" }}
              onClick={exportToExcel}
              startIcon={<GridOn />}
            >
              Export Excel
            </Button>
          </div>
        </div>

        <div className="row g-3 align-items-end mb-4">
          <div className="col-md-3">
            <TextField
              label="From Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
          </div>
          <div className="col-md-3">
            <TextField
              label="To Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </div>
          <div className="col-md-3">
            <FormControl fullWidth>
              <InputLabel id="broker-filter-label">Broker</InputLabel>
              <Select
                labelId="broker-filter-label"
                value={brokerFilter}
                label="Broker"
                onChange={(e) => setBrokerFilter(e.target.value)}
              >
                <MenuItem value="">All Brokers</MenuItem>
                {brokers.map((broker) => (
                  <MenuItem key={broker.brokerId} value={broker.brokerId}>
                    {broker.brokerName} ({broker.brokerCompanyName})
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </div>
          <div className="col-md-auto">
            <Button
              variant="contained"
              color="success"
              onClick={handleFilter}
              startIcon={<FilterList />}
            >
              Filter
            </Button>
          </div>
          <div className="col-md-auto">
            <Button
              variant="outlined"
              color="warning"
              onClick={clearFilters}
              startIcon={<Clear />}
            >
              Clear
            </Button>
          </div>
        </div>

        <div className="table-responsive">
          <table className="table table-bordered table-striped table-hover">
            <thead className="table-success">
              <tr>
                <th>Lot Number</th>
                <th>Tea Type</th>
                <th>Weight</th>
                <th>Employee Valuation per.kg</th>
                <th>Broker Valuation per.kg</th>
                <th>Sold Price per.kg</th>
                <th>Total Price</th>
                <th>Sold Date</th>
                <th>Broker Name</th>
                <th>Company</th>
              </tr>
            </thead>
            <tbody>
              {currentRecords.length > 0 ? (
                currentRecords.map((lot) => (
                  <tr key={lot.lotNumber}>
                    <td>{lot.lotNumber}</td>
                    <td>{lot.teaTypeName}</td>
                    <td>{lot.totalNetWeight} kg</td>
                    <td>Rs. {lot.employeeValuationPrice}</td>
                    <td>Rs. {lot.brokerValuationPrice}</td>
                    <td>Rs. {lot.soldPrice}</td>
                    <td>Rs. {lot.total_sold_price}</td>
                    <td>{new Date(lot.soldDate).toLocaleDateString()}</td>
                    <td>{lot.brokerName}</td>
                    <td>{lot.brokerCompany}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="10" className="text-center">
                    No records found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="d-flex justify-content-between mt-3">
          <span>
            Page {currentPage} of {totalPages || 1}
          </span>
          <div>
            <Button
              variant="outlined"
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
            >
              Previous
            </Button>
            <Button
              variant="outlined"
              disabled={currentPage === totalPages || totalPages === 0}
              onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
              className="ms-2"
            >
              Next
            </Button>
          </div>
        </div>

        <Snackbar
          open={snackbar.open}
          autoHideDuration={3000}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          anchorOrigin={{ vertical: "top", horizontal: "center" }}
        >
          <Alert
            onClose={() => setSnackbar({ ...snackbar, open: false })}
            severity={snackbar.severity}
            sx={{ width: "100%" }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </div>
    </EmployeeLayout>
  );
};

export default SoldLotsReport;