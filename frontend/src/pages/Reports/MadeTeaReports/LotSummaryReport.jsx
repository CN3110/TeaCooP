import React, { useEffect, useState } from "react";
import EmployeeLayout from "../../../components/EmployeeLayout/EmployeeLayout";
import jsPDF from "jspdf";
import "jspdf-autotable";

const LotSummaryReport = () => {
  const [lots, setLots] = useState([]);
  const [statusFilter, setStatusFilter] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  const fetchReport = async () => {
    try {
      if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
        alert("Start date cannot be after end date.");
        return;
      }

      const queryParams = new URLSearchParams();
      if (startDate && endDate) {
        queryParams.append("startDate", startDate);
        queryParams.append("endDate", endDate);
      }
      if (statusFilter) {
        queryParams.append("status", statusFilter);
      }

      const response = await fetch(`http://localhost:3001/api/reports/lot-summary?${queryParams}`);
      const data = await response.json();
      setLots(data);
    } catch (error) {
      console.error("Error fetching report:", error);
    }
  };

  useEffect(() => {
    fetchReport(); // Fetch on mount
  }, []);

  const handleFilter = () => {
    fetchReport();
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    const userId = localStorage.getItem("userId") || "Unknown";
    const generationTime = new Date().toLocaleString();

    const headers = [
      ["Lot Number", "Manufacturing Date", "Tea Type", "No. of Bags", "Net Weight", "Total Net Weight", "Valuation Price", "Status", "Notes"]
    ];

    const rows = lots.map(lot => ([
      lot.lotNumber,
      new Date(lot.manufacturingDate).toLocaleDateString(),
      lot.teaTypeName,
      lot.noOfBags,
      lot.netWeight,
      lot.totalNetWeight,
      lot.valuationPrice,
      lot.status,
      lot.notes,
    ]));

    const filtersText = `Filters - Start Date: ${startDate || 'N/A'}, End Date: ${endDate || 'N/A'}, Status: ${statusFilter || 'All'}`;

    doc.setFontSize(12);
    doc.text("Lot Summary Report", 14, 15);
    doc.setFontSize(10);
    doc.text(filtersText, 14, 22);

    doc.autoTable({
      startY: 28,
      head: headers,
      body: rows,
      margin: { top: 28 },
      didDrawPage: (data) => {
        const pageCount = doc.internal.getNumberOfPages();
        const pageSize = doc.internal.pageSize;
        const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();

        doc.setFontSize(10);
        doc.text(
          `Page ${doc.internal.getCurrentPageInfo().pageNumber} of ${pageCount}`,
          data.settings.margin.left,
          pageHeight - 10
        );
        doc.text(
          `Generated by: ${userId}`,
          data.settings.margin.left + 80,
          pageHeight - 10
        );
        doc.text(
          `Generated on: ${generationTime}`,
          data.settings.margin.left + 140,
          pageHeight - 10
        );
      }
    });

    doc.save("LotSummaryReport.pdf");
  };

  return (
    <EmployeeLayout>
      <div className="lot-report-container">
        <h3>Lot Summary Report</h3>
        <div className="filters">
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
          />
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
          />
          <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="">All Statuses</option>
            <option value="available">Available</option>
            <option value="valuation_pending">Valuation Pending</option>
            <option value="confirmed">Confirmed</option>
            <option value="sold">Sold</option>
          </select>
          <button onClick={handleFilter}>Apply Filters</button>
          <button onClick={generatePDF}>Export PDF</button>
        </div>

        <table className="report-table">
          <thead>
            <tr>
              <th>Lot Number</th>
              <th>Manufacturing Date</th>
              <th>Tea Type</th>
              <th>No. of Bags</th>
              <th>Net Weight</th>
              <th>Total Net Weight</th>
              <th>Valuation Price</th>
              <th>Status</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            {lots.map((lot) => (
              <tr key={lot.lotNumber}>
                <td>{lot.lotNumber}</td>
                <td>{new Date(lot.manufacturingDate).toLocaleDateString()}</td>
                <td>{lot.teaTypeName}</td>
                <td>{lot.noOfBags}</td>
                <td>{lot.netWeight}</td>
                <td>{lot.totalNetWeight}</td>
                <td>{lot.valuationPrice}</td>
                <td>{lot.status}</td>
                <td>{lot.notes}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </EmployeeLayout>
  );
};

export default LotSummaryReport;
