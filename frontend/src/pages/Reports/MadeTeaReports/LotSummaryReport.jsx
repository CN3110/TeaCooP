import React, { useEffect, useState } from "react";
import { useNavigate } from 'react-router-dom';
import { ArrowBack } from '@mui/icons-material';
import EmployeeLayout from "../../../components/EmployeeLayout/EmployeeLayout";
import jsPDF from "jspdf";
import "jspdf-autotable";
import {
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Button,
  Snackbar,
  Alert,
} from "@mui/material";
import { FilterList, Clear, Download } from "@mui/icons-material";

const LotSummaryReport = () => {
  const [lots, setLots] = useState([]);
  const [filteredLots, setFilteredLots] = useState([]);
  const [statusFilter, setStatusFilter] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 25;

  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "info",
  });

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  const fetchLots = async () => {
    try {
      const params = new URLSearchParams();
      if (startDate && endDate) {
        params.append("startDate", startDate);
        params.append("endDate", endDate);
      }
      if (statusFilter) {
        params.append("status", statusFilter);
      }

      const res = await fetch(`http://localhost:3001/api/reports/lot-summary?${params}`);
      const data = await res.json();

      if (Array.isArray(data)) {
        setLots(data);
        setFilteredLots(data);
        setCurrentPage(1);
      } else {
        showSnackbar("Unexpected response format", "error");
      }
    } catch (err) {
      console.error(err);
      showSnackbar("Error fetching report", "error");
    }
  };

  useEffect(() => {
    fetchLots();
  }, []);

  const handleFilter = () => {
    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
      showSnackbar("Start date cannot be after end date", "error");
      return;
    }
    fetchLots();
    showSnackbar("Filters applied", "success");
  };

  const clearFilters = () => {
    setStartDate("");
    setEndDate("");
    setStatusFilter("");
    setFilteredLots(lots);
    setCurrentPage(1);
    showSnackbar("Filters cleared", "info");
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    const userId = localStorage.getItem("userId") || "Unknown";
    const generationTime = new Date().toLocaleString();
    const totalPages = Math.ceil(filteredLots.length / recordsPerPage);

    for (let i = 0; i < totalPages; i++) {
      if (i > 0) doc.addPage();
      const pageData = filteredLots.slice(i * recordsPerPage, (i + 1) * recordsPerPage);

      doc.setFontSize(16);
      doc.text("Lot Summary Report", 14, 20);

      doc.autoTable({
        startY: 30,
        head: [[
          "Lot Number", "Date", "Tea Type", "No. of Bags", "Net Weight", "Total Net", "Employee's Valuation", "Status", "Notes"
        ]],
        body: pageData.map(lot => ([
          lot.lotNumber,
          new Date(lot.manufacturingDate).toLocaleDateString(),
          lot.teaTypeName,
          lot.noOfBags,
          lot.netWeight,
          lot.totalNetWeight,
          lot.valuationPrice,
          lot.status,
          lot.notes
        ])),
      });

      doc.setFontSize(10);
      doc.text(`Generated by: ${userId}`, 14, 280);
      doc.text(`Generated on: ${generationTime}`, 14, 285);
      doc.text(`Page ${i + 1} of ${totalPages}`, 170, 285);
    }

    doc.save(`lot_summary_report_${generationTime.replace(/[/:, ]/g, "_")}.pdf`);
    showSnackbar("PDF exported", "success");
  };

  const indexOfLastRecord = currentPage * recordsPerPage;
  const currentRecords = filteredLots.slice(indexOfLastRecord - recordsPerPage, indexOfLastRecord);
  const totalPages = Math.ceil(filteredLots.length / recordsPerPage);

   const navigate = useNavigate();

  return (
    <EmployeeLayout>
      <div className="container mt-4 mb-5">
        <Button 
  variant="outlined" 
  color="primary" 
  startIcon={<ArrowBack />}
  onClick={() => navigate('/report-dashboard')}
>
  Back
</Button>
        <h2 className="mb-4 text-success">Lot Summary Report</h2>

        <div className="row g-3 align-items-end mb-4">
          <div className="col-md-3">
            <TextField
              label="Start Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
          </div>
          <div className="col-md-3">
            <TextField
              label="End Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </div>
          <div className="col-md-3">
            <FormControl fullWidth>
              <InputLabel>Status</InputLabel>
              <Select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                label="Status"
              >
                <MenuItem value="">All</MenuItem>
                <MenuItem value="available">Available</MenuItem>
                <MenuItem value="valuation_pending">Valuation Pending</MenuItem>
                <MenuItem value="confirmed">Confirmed</MenuItem>
                <MenuItem value="sold">Sold</MenuItem>

              </Select>
            </FormControl>
          </div>
          <div className="col-md-auto">
            <Button variant="contained" color="success" onClick={handleFilter} startIcon={<FilterList />}>
              Filter
            </Button>
          </div>
          <div className="col-md-auto">
            <Button variant="outlined" color="warning" onClick={clearFilters} startIcon={<Clear />}>
              Clear
            </Button>
          </div>
          <div className="col-md-auto">
            <Button variant="contained" color="error" onClick={exportPDF} startIcon={<Download />}>
              Export as PDF
            </Button>
          </div>
        </div>

        <div className="table-responsive">
          <table className="table table-bordered table-striped">
            <thead className="table-success">
              <tr>
                <th>Lot Number</th>
                <th>Date</th>
                <th>Tea Type</th>
                <th>No. of Bags</th>
                <th>Net Weight</th>
                <th>Total Net</th>
                <th>Employee's Valuation</th>
                <th>Status</th>
                <th>Notes</th>
              </tr>
            </thead>
            <tbody>
              {currentRecords.length > 0 ? (
                currentRecords.map((lot, i) => (
                  <tr key={i}>
                    <td>{lot.lotNumber}</td>
                    <td>{new Date(lot.manufacturingDate).toLocaleDateString()}</td>
                    <td>{lot.teaTypeName}</td>
                    <td>{lot.noOfBags}</td>
                    <td>{lot.netWeight}</td>
                    <td>{lot.totalNetWeight}</td>
                    <td>{lot.valuationPrice}</td>
                    <td>{lot.status}</td>
                    <td>{lot.notes}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="9" className="text-center">No records found.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="d-flex justify-content-between mt-3">
          <span>
            Page {currentPage} of {totalPages || 1}
          </span>
          <div>
            <Button
              variant="outlined"
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
            >
              Previous
            </Button>
            <Button
              variant="outlined"
              disabled={currentPage === totalPages || totalPages === 0}
              onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
              className="ms-2"
            >
              Next
            </Button>
          </div>
        </div>

        {/* Snackbar */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={3000}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert
            onClose={() => setSnackbar({ ...snackbar, open: false })}
            severity={snackbar.severity}
            sx={{ width: "100%" }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </div>
    </EmployeeLayout>
  );
};

export default LotSummaryReport;
