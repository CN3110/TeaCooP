import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowBack } from '@mui/icons-material';
import axios from 'axios';
import {
  Box,
  Button,
  TextField,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  LinearProgress,
  Snackbar,
  Alert,
  Divider,
  Stack
} from '@mui/material';
import { DateRange, Clear, PictureAsPdf, Description } from '@mui/icons-material';
import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { format } from 'date-fns';
import EmployeeLayout from '../../../components/EmployeeLayout/EmployeeLayout'; 
import AdminLayout from '../../../components/AdminLayout/AdminLayout';

const MadeTeaProductionReport = () => {
  const [reportData, setReportData] = useState([]);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' });

  // Get user info from localStorage
  const employeeId = localStorage.getItem('userId') || 'Unknown';
  const generatedAt = new Date().toLocaleString();

  // Export functions
  const exportToPDF = () => {
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(16);
    doc.text('Made Tea Production Report', 14, 15);
    doc.setFontSize(11);
    
    // Filter info
    let filterStr = '';
    if (startDate) filterStr += `From: ${startDate}  `;
    if (endDate) filterStr += `To: ${endDate}`;
    if (filterStr) doc.text(filterStr, 14, 25);
    
    // Table
    doc.autoTable({
      head: [['Production ID', 'Date', 'Weight (kg)', 'Created By', 'Raw Tea Used']],
      body: reportData.map(item => [
        item.productionId,
        item.productionDate,
        item.weightInKg,
        item.createdBy,
        item.rawTeaUsed
      ]),
      startY: filterStr ? 35 : 25,
      styles: { fontSize: 10 },
      headStyles: { fillColor: [22, 115, 155] }
    });
    
    // Footer
    const finalY = doc.lastAutoTable.finalY || 40;
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(`Report generated by: ${employeeId}`, 14, finalY + 10);
    doc.text(`Generated at: ${generatedAt}`, 14, finalY + 15);
    
    doc.save('made_tea_production_report.pdf');
  };

  const exportToExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet([]);
    const workbook = XLSX.utils.book_new();
    
    // Header and metadata
    const filterInfo = [];
    if (startDate) filterInfo.push(`From: ${startDate}`);
    if (endDate) filterInfo.push(`To: ${endDate}`);
    
    XLSX.utils.sheet_add_aoa(
      worksheet,
      [
        ['Made Tea Production Report'],
        [`Filters: ${filterInfo.join(', ')}`],
        [`Generated by: ${employeeId}`],
        [`Generated at: ${generatedAt}`],
        [],
        ['Production ID', 'Date', 'Weight (kg)', 'Created By', 'Raw Tea Used']
      ],
      { origin: 'A1' }
    );
    
    // Data
    XLSX.utils.sheet_add_json(
      worksheet,
      reportData.map(item => ({
        'Production ID': item.productionId,
        'Date': item.productionDate,
        'Weight (kg)': item.weightInKg,
        'Created By': item.createdBy,
        'Raw Tea Used': item.rawTeaUsed
      })),
      { origin: 'A7', skipHeader: true }
    );
    
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Report');
    XLSX.writeFile(workbook, 'made_tea_production_report.xlsx');
  };

  const fetchReport = async () => {
    try {
      setLoading(true);
      
      const params = {};
      if (startDate) params.startDate = startDate;
      if (endDate) params.endDate = endDate;
      
      const response = await axios.get(
        'http://localhost:3001/api/reports/made-tea-production',
        { params }
      );
      
      setReportData(response.data.data);
      
    } catch (error) {
      console.error('Error:', error);
      setSnackbar({
        open: true,
        message: error.response?.data?.message || 'Failed to fetch report',
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleClearFilters = () => {
    setStartDate('');
    setEndDate('');
    fetchReport();
  };

  useEffect(() => {
    fetchReport();
  }, []);

  
const navigate = useNavigate();


const userRole = localStorage.getItem('userRole');
const Layout = userRole === 'admin' ? AdminLayout : EmployeeLayout;

  return (
    <Layout>
    <Paper elevation={3} sx={{ p: 3 }}>
      <Button 
  variant="outlined" 
  color="primary" 
  startIcon={<ArrowBack />}
  onClick={() => navigate('/report-dashboard')}
>
  Back
</Button>
      <Typography variant="h5" gutterBottom>
        Made Tea Production Report
      </Typography>

      {/* Filters */}
      <Box sx={{ display: 'flex', gap: 2, mb: 3, alignItems: 'center' }}>
        <TextField
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          InputLabelProps={{ shrink: true }}
          sx={{ width: 180 }}
        />
        
        <TextField
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          InputLabelProps={{ shrink: true }}
          sx={{ width: 180 }}
        />
        
        <Button
          variant="contained"
          startIcon={<DateRange />}
          onClick={fetchReport}
          disabled={loading}
        >
          Apply
        </Button>
        
        <Button
          variant="outlined"
          startIcon={<Clear />}
          onClick={handleClearFilters}
          disabled={loading}
        >
          Clear
        </Button>
      </Box>
{/* Export Buttons */}
      <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
        <Button
          variant="contained"
          color="error"
          startIcon={<PictureAsPdf />}
          onClick={exportToPDF}
          disabled={reportData.length === 0}
        >
          Export PDF
        </Button>
        <Button
          variant="contained"
          color="success"
          startIcon={<Description />}
          onClick={exportToExcel}
          disabled={reportData.length === 0}
        >
          Export Excel
        </Button>
      </Box>
      {loading && <LinearProgress sx={{ mb: 2 }} />}

      {/* Report Table */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Production ID</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>Weight (kg)</TableCell>
              <TableCell>Created By</TableCell>
              <TableCell>Raw Tea Used</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {reportData.length > 0 ? (
              reportData.map((row) => (
                <TableRow key={row.productionId}>
                  <TableCell>{row.productionId}</TableCell>
                  <TableCell>{row.productionDate}</TableCell>
                  <TableCell>{row.weightInKg}</TableCell>
                  <TableCell>{row.createdBy}</TableCell>
                  <TableCell>{row.rawTeaUsed}</TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} align="center">
                  {loading ? 'Loading data...' : 'No production records found'}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>

      

      {/* Report Footer */}
      <Divider sx={{ my: 2 }} />
      <Stack direction="row" justifyContent="space-between">
        <Typography variant="body2" color="text.secondary">
          Generated by: <strong>{employeeId}</strong>
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Generated at: <strong>{generatedAt}</strong>
        </Typography>
      </Stack>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Paper>
    </Layout>
  );
};

export default MadeTeaProductionReport;