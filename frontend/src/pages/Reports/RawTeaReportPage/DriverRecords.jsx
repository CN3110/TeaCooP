import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Box,
  Button,
  Grid,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Pagination,
  Container,
  Stack,
  Tooltip,
  Chip,
} from "@mui/material";
import ClearIcon from "@mui/icons-material/Clear";
import DownloadIcon from "@mui/icons-material/Download";
import * as XLSX from "xlsx";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { format } from "date-fns";
import EmployeeLayout from "../../../components/EmployeeLayout/EmployeeLayout.jsx";

const DriverRecords = () => {
  const [records, setRecords] = useState([]);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [driverId, setDriverId] = useState("All");
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 10;

  useEffect(() => {
    fetchRecords();
  }, [fromDate, toDate, driverId]);

  const fetchRecords = async () => {
    try {
      const response = await axios.get("http://localhost:3001/api/reports/driver-records", {
        params: { from: fromDate, to: toDate, driverId },
      });
      setRecords(response.data || []);
    } catch (err) {
      console.error("Error fetching driver records:", err);
    }
  };

  const handleClearFilters = () => {
    setFromDate("");
    setToDate("");
    setDriverId("All");
    setCurrentPage(1);
  };

  const calculateTotalRawTea = () => {
    return records.reduce((total, rec) => total + Number(rec.totalRawTeaWeight), 0);
  };

  const downloadExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet([]);
    const total = calculateTotalRawTea();

    const filterInfo = [];
    if (fromDate) filterInfo.push(`From: ${fromDate}`);
    if (toDate) filterInfo.push(`To: ${toDate}`);
    if (driverId !== "All") filterInfo.push(`Driver ID: ${driverId}`);

    const titleText = filterInfo.length
      ? "Driver Raw Tea Report (Filtered)"
      : "Driver Raw Tea Report";

    XLSX.utils.sheet_add_aoa(
      worksheet,
      [
        [titleText],
        [`Filters: ${filterInfo.join(", ")}`],
        [`Generated: ${format(new Date(), "yyyy-MM-dd HH:mm:ss")}`],
        [],
      ],
      { origin: "A1" }
    );

    const exportData = records.map((rec) => ({
      "Driver ID": rec.driverId,
      "Total Raw Tea (kg)": rec.totalRawTeaWeight,
    }));

    XLSX.utils.sheet_add_json(worksheet, exportData, {
      origin: "A5",
      skipHeader: false,
    });

    XLSX.utils.sheet_add_aoa(
      worksheet,
      [["Total Raw Tea (kg):", total]],
      { origin: `A${exportData.length + 7}` }
    );

    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Driver Report");
    XLSX.writeFile(workbook, "Driver_Report.xlsx");
  };

  const downloadPDF = () => {
    const doc = new jsPDF();
    const employeeId = localStorage.getItem("userId") || "Unknown";
    const generatedAt = new Date().toLocaleString();

    let title = "Driver Raw Tea Report";
    if (fromDate || toDate || driverId !== "All") {
      title += " (Filtered)";
    }

    doc.setFontSize(16);
    doc.text(title, 14, 15);
    doc.setFontSize(11);

    let filterStr = "";
    if (fromDate) filterStr += `From: ${fromDate}  `;
    if (toDate) filterStr += `To: ${toDate}  `;
    if (driverId !== "All") filterStr += `Driver ID: ${driverId}`;

    doc.text(filterStr, 14, 25);

    const tableData = records.map((rec) => [rec.driverId, rec.totalRawTeaWeight]);

    doc.autoTable({
      head: [["Driver ID", "Total Raw Tea (kg)"]],
      body: tableData,
      startY: 40,
    });

    const finalY = doc.lastAutoTable.finalY || 40;
    doc.text(`Total Raw Tea (kg): ${calculateTotalRawTea().toFixed(2)}`, 14, finalY + 10);

    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(`Report generated by: ${employeeId}`, 14, doc.internal.pageSize.height - 10);
    doc.text(`Generated at: ${generatedAt}`, 14, doc.internal.pageSize.height - 5);
    doc.save("Driver_Report.pdf");
  };

  // Pagination logic
  const indexOfLastRecord = currentPage * recordsPerPage;
  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
  const currentRecords = records.slice(indexOfFirstRecord, indexOfLastRecord);
  const totalPages = Math.ceil(records.length / recordsPerPage);

  return (
    <EmployeeLayout>
      <Container maxWidth="lg" sx={{ mt: 4, mb: 8 }}>
        <Paper elevation={3} sx={{ p: 3, borderRadius: 2 }}>
          <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h4" color="primary">
              Driver Raw Tea Records
            </Typography>
            <Stack direction="row" spacing={1}>
              <Tooltip title="Download Excel">
                <Button variant="outlined" color="success" onClick={downloadExcel} startIcon={<DownloadIcon />}>
                  Excel
                </Button>
              </Tooltip>
              <Tooltip title="Download PDF">
                <Button variant="outlined" color="error" onClick={downloadPDF} startIcon={<DownloadIcon />}>
                  PDF
                </Button>
              </Tooltip>
            </Stack>
          </Box>

          {/* Filter Section */}
          <Paper elevation={1} sx={{ p: 2, mb: 4, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6} md={4}>
                <TextField
                  fullWidth
                  label="From Date"
                  type="date"
                  value={fromDate}
                  onChange={(e) => setFromDate(e.target.value)}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6} md={4}>
                <TextField
                  fullWidth
                  label="To Date"
                  type="date"
                  value={toDate}
                  onChange={(e) => setToDate(e.target.value)}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6} md={4}>
                <Button
                  fullWidth
                  variant="outlined"
                  color="secondary"
                  startIcon={<ClearIcon />}
                  onClick={handleClearFilters}
                >
                  Clear Filters
                </Button>
              </Grid>
            </Grid>
          </Paper>

          {/* Active Filters */}
          {(fromDate || toDate || driverId !== "All") && (
            <Box sx={{ mb: 3, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              <Typography variant="body2" color="text.secondary" sx={{ mr: 1, mt: 0.5 }}>
                Active filters:
              </Typography>
              {fromDate && (
                <Chip
                  label={`From: ${format(new Date(fromDate), 'MMM dd, yyyy')}`}
                  size="small"
                  color="primary"
                  variant="outlined"
                />
              )}
              {toDate && (
                <Chip
                  label={`To: ${format(new Date(toDate), 'MMM dd, yyyy')}`}
                  size="small"
                  color="primary"
                  variant="outlined"
                />
              )}
              {driverId !== "All" && (
                <Chip
                  label={`Driver ID: ${driverId}`}
                  size="small"
                  color="primary"
                  variant="outlined"
                />
              )}
            </Box>
          )}

          {/* Data Table */}
          <TableContainer component={Paper} sx={{ maxHeight: 500 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>Driver ID</TableCell>
                  <TableCell>Total Raw Tea (kg)</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {currentRecords.map((rec, index) => (
                  <TableRow key={index}>
                    <TableCell>{rec.driverId}</TableCell>
                    <TableCell>{rec.totalRawTeaWeight}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>

          <Box mt={2} display="flex" justifyContent="center">
            <Pagination
              count={totalPages}
              page={currentPage}
              onChange={(e, val) => setCurrentPage(val)}
              color="primary"
            />
          </Box>
        </Paper>
      </Container>
    </EmployeeLayout>
  );
};

export default DriverRecords;
