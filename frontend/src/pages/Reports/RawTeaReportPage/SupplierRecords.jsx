/*date
filters sre not working
selftreasport dot selection
dont want total cards
generated by - employee Id from local sotrage- userId
change excel formai, type after the title
pdf not working
adjust report title with the filters
*/
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import {
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Grid,
  Table,
  TableContainer,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Box,
  Card,
  CardContent,
  Chip,
  Stack,
  Pagination,
  Divider,
  IconButton,
  InputAdornment,
  Tooltip,
  CircularProgress,
  Alert
} from '@mui/material';
import {
  FilterAlt as FilterIcon,
  CloudDownload as DownloadIcon,
  PictureAsPdf as PdfIcon,
  FileDownload as ExcelIcon,
  Refresh as RefreshIcon,
  DateRange as DateRangeIcon,
  LocalShipping as TransportIcon
} from '@mui/icons-material';

const SupplierRecords = () => {
  const [reportData, setReportData] = useState([]);
  const [fromDate, setFromDate] = useState('');
  const [toDate, setToDate] = useState('');
  const [transportFilter, setTransportFilter] = useState('All');
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const recordsPerPage = 10;

  // Calculate totals with proper error handling
  const calculateTotals = () => {
    if (!Array.isArray(reportData)) {
      return {
        totalRandalu: 0,
        totalGreenTeaLeaves: 0,
        totalRawTea: 0,
        supplierCount: 0
      };
    }

    return reportData.reduce((acc, curr) => {
      return {
        totalRandalu: acc.totalRandalu + (Number(curr?.total_randalu) || 0),
        totalGreenTeaLeaves: acc.totalGreenTeaLeaves + (Number(curr?.total_green_tea_leaves) || 0),
        totalRawTea: acc.totalRawTea + (Number(curr?.total_raw_tea_weight) || 0),
        supplierCount: acc.supplierCount + 1
      };
    }, { totalRandalu: 0, totalGreenTeaLeaves: 0, totalRawTea: 0, supplierCount: 0 });
  };

  const fetchReport = async () => {
    setLoading(true);
    setError('');
    try {
      const params = {};
      if (fromDate) params.from = fromDate;
      if (toDate) params.to = toDate;
      if (transportFilter !== 'All') params.selfTransport = transportFilter;

      const res = await axios.get('http://localhost:3001/api/reports/supplier-records', { params });
      
      // Ensure response data is an array
      const data = Array.isArray(res?.data) ? res.data : [];
      setReportData(data);
    } catch (err) {
      console.error('Error fetching report', err);
      setError('Failed to fetch report data. Please try again.');
      setReportData([]); // Reset to empty array on error
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchReport();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleReset = () => {
    setFromDate('');
    setToDate('');
    setTransportFilter('All');
    setCurrentPage(1);
  };

  const downloadExcel = () => {
    // Prepare data for export
    const exportData = reportData.map(row => ({
      'Supplier ID': row.supplierId,
      'Total Randalu (kg)': Number(row.total_randalu).toFixed(2),
      'Total Green Tea Leaves (kg)': Number(row.total_green_tea_leaves).toFixed(2),
      'Total Raw Tea (kg)': Number(row.total_raw_tea_weight).toFixed(2),
      'Self Transport Used': row.self_transport_used
    }));

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Supplier Records');
    
    // Add filter info to worksheet
    let filterInfo = [];
    if (fromDate) filterInfo.push(`From Date: ${fromDate}`);
    if (toDate) filterInfo.push(`To Date: ${toDate}`);
    if (transportFilter !== 'All') filterInfo.push(`Self Transport: ${transportFilter}`);
    
    // Add header to worksheet with filter info
    if (filterInfo.length > 0) {
      XLSX.utils.sheet_add_aoa(worksheet, 
        [['Supplier Records Report'], ['Filters: ' + filterInfo.join(', ')], ['Generated: ' + format(new Date(), 'yyyy-MM-dd HH:mm:ss')]],
        { origin: 'A1' });
    }
    
    XLSX.writeFile(workbook, 'SupplierRecords.xlsx');
  };

  const downloadPDF = () => {
    const doc = new jsPDF();
    
    // Title and header info
    doc.setFontSize(18);
    doc.text('Supplier Records Report', 14, 15);
    
    doc.setFontSize(11);
    doc.text(`Generated By: Admin`, 14, 25);
    doc.text(`Generated Time: ${format(new Date(), 'yyyy-MM-dd HH:mm:ss')}`, 14, 32);
    
    // Add filter info if any
    let yPos = 39;
    if (fromDate || toDate || transportFilter !== 'All') {
      let filterText = 'Filters: ';
      if (fromDate) filterText += `From ${fromDate} `;
      if (toDate) filterText += `To ${toDate} `;
      if (transportFilter !== 'All') filterText += `Self Transport: ${transportFilter}`;
      
      doc.text(filterText, 14, yPos);
      yPos += 7;
    }
    
    // Add summary
    doc.text(`Total Suppliers: ${totals.supplierCount}`, 14, yPos);
    yPos += 7;
    doc.text(`Total Randalu: ${totals.totalRandalu.toFixed(2)} kg`, 14, yPos);
    yPos += 7;
    doc.text(`Total Green Tea Leaves: ${totals.totalGreenTeaLeaves.toFixed(2)} kg`, 14, yPos);
    yPos += 7;
    doc.text(`Total Raw Tea: ${totals.totalRawTea.toFixed(2)} kg`, 14, yPos);
    yPos += 10;

    // Table data
    const tableData = reportData.map(row => [
      row.supplierId,
      Number(row.total_randalu).toFixed(2),
      Number(row.total_green_tea_leaves).toFixed(2),
      Number(row.total_raw_tea_weight).toFixed(2),
      row.self_transport_used
    ]);

    doc.autoTable({
      head: [['Supplier ID', 'Total Randalu (kg)', 'Total Green Tea (kg)', 'Total Raw Tea (kg)', 'Self Transport']],
      body: tableData,
      startY: yPos,
      headStyles: { fillColor: [76, 175, 80] }
    });

    doc.save('SupplierRecords.pdf');
  };

  // Pagination
  const indexOfLastRecord = currentPage * recordsPerPage;
  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
  const currentRecords = reportData.slice(indexOfFirstRecord, indexOfLastRecord);
  const totalPages = Math.ceil(reportData.length / recordsPerPage);

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 8 }}>
      <Paper elevation={3} sx={{ p: 3, borderRadius: 2 }}>
        {/* Header */}
        <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="h4" component="h1" color="primary" fontWeight="500">
            Supplier Records Report
          </Typography>
          <Stack direction="row" spacing={1}>
            <Tooltip title="Download Excel">
              <span> {/* Added span wrapper to fix Tooltip warning */}
                <Button 
                  variant="outlined" 
                  color="success" 
                  onClick={downloadExcel}
                  startIcon={<ExcelIcon />}
                  disabled={loading || reportData.length === 0}
                >
                  Excel
                </Button>
              </span>
            </Tooltip>
            <Tooltip title="Download PDF">
              <span> {/* Added span wrapper to fix Tooltip warning */}
                <Button 
                  variant="outlined" 
                  color="error" 
                  onClick={downloadPDF}
                  startIcon={<PdfIcon />}
                  disabled={loading || reportData.length === 0}
                >
                  PDF
                </Button>
              </span>
            </Tooltip>
          </Stack>
        </Box>

        {/* Filter Section */}
        <Paper elevation={1} sx={{ p: 2, mb: 4, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={6} md={3}>
              <TextField
                fullWidth
                label="From Date"
                type="date"
                value={fromDate}
                onChange={e => setFromDate(e.target.value)}
                InputLabelProps={{ shrink: true }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <DateRangeIcon color="primary" />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <TextField
                fullWidth
                label="To Date"
                type="date"
                value={toDate}
                onChange={e => setToDate(e.target.value)}
                InputLabelProps={{ shrink: true }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <DateRangeIcon color="primary" />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <FormControl fullWidth>
                <InputLabel id="transport-select-label">Self Transport</InputLabel>
                <Select
                  labelId="transport-select-label"
                  value={transportFilter}
                  label="Self Transport"
                  onChange={e => setTransportFilter(e.target.value)}
                  startAdornment={
                    <InputAdornment position="start">
                      <TransportIcon color="primary" />
                    </InputAdornment>
                  }
                >
                  <MenuItem value="All">All</MenuItem>
                  <MenuItem value="Yes">Yes</MenuItem>
                  <MenuItem value="No">No</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <Button 
                fullWidth 
                variant="contained" 
                color="primary"
                startIcon={<FilterIcon />}
                onClick={fetchReport}
              >
                Apply Filter
              </Button>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <Button 
                fullWidth 
                variant="outlined" 
                color="secondary"
                startIcon={<RefreshIcon />}
                onClick={handleReset}
              >
                Reset
              </Button>
            </Grid>
          </Grid>
        </Paper>

        {/* Active Filters Display */}
        {(fromDate || toDate || transportFilter !== 'All') && (
          <Box sx={{ mb: 3, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mr: 1, mt: 0.5 }}>
              Active filters:
            </Typography>
            {fromDate && (
              <Chip 
                label={`From: ${format(new Date(fromDate), 'MMM dd, yyyy')}`} 
                size="small" 
                color="primary" 
                variant="outlined"
              />
            )}
            {toDate && (
              <Chip 
                label={`To: ${format(new Date(toDate), 'MMM dd, yyyy')}`} 
                size="small" 
                color="primary" 
                variant="outlined"
              />
            )}
            {transportFilter !== 'All' && (
              <Chip 
                label={`Self Transport: ${transportFilter}`} 
                size="small" 
                color="primary" 
                variant="outlined" 
                icon={<TransportIcon fontSize="small" />}
              />
            )}
          </Box>
        )}

        {/* Error Message */}
        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        {/* Summary Cards */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Card sx={{ bgcolor: '#e8f5e9', height: '100%' }}>
              <CardContent>
                <Typography color="textSecondary" gutterBottom>
                  Total Suppliers
                </Typography>
                <Typography variant="h4" component="div" color="#2e7d32">
                  {/*{totals.supplierCount}*/}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card sx={{ bgcolor: '#e3f2fd', height: '100%' }}>
              <CardContent>
                <Typography color="textSecondary" gutterBottom>
                  Total Randalu
                </Typography>
                <Typography variant="h4" component="div" color="#1565c0">
                  {/*{totals.totalRandalu.toFixed(2)} kg */}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card sx={{ bgcolor: '#fff3e0', height: '100%' }}>
              <CardContent>
                <Typography color="textSecondary" gutterBottom>
                  Total Green Tea Leaves
                </Typography>
                <Typography variant="h4" component="div" color="#e65100">
                  {/* {totals.totalGreenTeaLeaves.toFixed(2)} kg */}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card sx={{ bgcolor: '#fce4ec', height: '100%' }}>
              <CardContent>
                <Typography color="textSecondary" gutterBottom>
                  Total Raw Tea
                </Typography>
                <Typography variant="h4" component="div" color="#c2185b">
                 {/* {totals.totalRawTea.toFixed(2)} kg */}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>

        {/* Generated Info */}
        <Box sx={{ mb: 2, display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between' }}>
          <Box component="div"> {/* Changed from Typography to Box to fix hydration error */}
            Report Generated By: <Chip label="Admin" size="small" variant="outlined" />
          </Box>
          <Typography variant="body2" color="text.secondary">
            Generated Time: {format(new Date(), 'yyyy-MM-dd HH:mm:ss')}
          </Typography>
        </Box>

        {/* Table */}
        <Paper elevation={2} sx={{ mb: 3, overflow: 'hidden', borderRadius: 1 }}>
          <TableContainer>
            <Table sx={{ minWidth: 650 }}>
              <TableHead>
                <TableRow sx={{ backgroundColor: '#f0f0f0' }}>
                  <TableCell sx={{ fontWeight: 'bold' }}>Supplier ID</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Total Randalu (kg)</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Total Green Tea Leaves (kg)</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Total Raw Tea (kg)</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Self Transport</TableCell>
                </TableRow>
              </TableHead>
              
                  <TableBody>
        {loading ? (
          <TableRow>
            <TableCell colSpan={5} align="center" sx={{ py: 4 }}>
              <CircularProgress size={40} />
              <Typography variant="body2" sx={{ mt: 2 }}>Loading data...</Typography>
            </TableCell>
          </TableRow>
        ) : error ? (
          <TableRow>
            <TableCell colSpan={5} align="center" sx={{ py: 4 }}>
              <Alert severity="error">{error}</Alert>
            </TableCell>
          </TableRow>
        ) : currentRecords.length === 0 ? (
          <TableRow>
            <TableCell colSpan={5} align="center" sx={{ py: 4 }}>
              <Typography variant="body1">No data found with selected filters</Typography>
            </TableCell>
          </TableRow>
        ) : (
          currentRecords.map((row, idx) => (
            <TableRow 
              key={idx}
              sx={{ 
                '&:nth-of-type(odd)': { backgroundColor: '#fafafa' },
                '&:hover': { backgroundColor: '#f1f8e9' }
              }}
            >
              <TableCell>{row?.supplierId || 'N/A'}</TableCell>
              <TableCell>{Number(row?.total_randalu || 0).toFixed(2)}</TableCell>
              <TableCell>{Number(row?.total_green_tea_leaves || 0).toFixed(2)}</TableCell>
              <TableCell>
                <Typography fontWeight="medium">
                  {Number(row?.total_raw_tea_weight || 0).toFixed(2)}
                </Typography>
              </TableCell>
              <TableCell>
                <Chip 
                  label={row?.self_transport_used || 'N/A'} 
                  size="small"
                  color={row?.self_transport_used === 'Yes' ? 'success' : 'default'}
                />
              </TableCell>
            </TableRow>
          ))
        )}
      </TableBody>
            </Table>
          </TableContainer>
        </Paper>

        {/* Pagination */}
        {reportData.length > 0 && (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
            <Pagination
              count={totalPages}
              page={currentPage}
              onChange={(e, value) => setCurrentPage(value)}
              color="primary"
              size="large"
              showFirstButton
              showLastButton
            />
          </Box>
        )}

        <Box sx={{ mt: 4, pt: 2, borderTop: '1px solid #e0e0e0', display: 'flex', justifyContent: 'space-between' }}>
          <Typography variant="body2" color="text.secondary">
            Showing {Math.min(reportData.length - indexOfFirstRecord, recordsPerPage)} of {reportData.length} records
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Tooltip title="Refresh Data">
              <IconButton size="small" onClick={fetchReport} color="primary">
                <RefreshIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            <Typography variant="body2" color="text.secondary">
              Last updated: {format(new Date(), 'MMM dd, yyyy HH:mm')}
            </Typography>
          </Box>
        </Box>
      </Paper>
    </Container>
  );
};

export default SupplierRecords;