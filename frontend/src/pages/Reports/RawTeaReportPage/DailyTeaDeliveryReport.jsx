import React, { useEffect, useState } from "react";
import axios from "axios";
import jsPDF from "jspdf";
import "jspdf-autotable";
import {
  Button,
  Snackbar,
  Alert,
  TextField,
} from "@mui/material";
import { FilterList, Clear, Download } from "@mui/icons-material";
import EmployeeLayout from "../../../components/EmployeeLayout/EmployeeLayout";

const DailyTeaDeliveryReport = () => {
  const [records, setRecords] = useState([]);
  const [filteredRecords, setFilteredRecords] = useState([]);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 25;

  // Snackbar state
  const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "info" });

  useEffect(() => {
    axios
      .get("http://localhost:3001/api/reports/all-daily-tea-deliveries")
      .then((res) => {
        if (Array.isArray(res.data)) {
          setRecords(res.data);
          setFilteredRecords(res.data);
        } else {
          showSnackbar("Expected array from server", "error");
        }
      })
      .catch(() => {
        showSnackbar("Failed to fetch data", "error");
      });
  }, []);

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  const handleFilter = () => {
    if (fromDate && toDate && new Date(fromDate) > new Date(toDate)) {
      showSnackbar("Start date cannot be after end date", "error");
      return;
    }

    const filtered = records.filter((record) => {
      const date = new Date(record.deliveryDate);
      return (
        (!fromDate || date >= new Date(fromDate)) &&
        (!toDate || date <= new Date(toDate))
      );
    });

    setFilteredRecords(filtered);
    setCurrentPage(1);
    showSnackbar(`${filtered.length} record(s) found`, "success");
  };

  const clearFilters = () => {
    setFromDate("");
    setToDate("");
    setFilteredRecords(records);
    setCurrentPage(1);
    showSnackbar("Filters cleared", "info");
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    const totalPages = Math.ceil(filteredRecords.length / recordsPerPage);
    const userId = localStorage.getItem("userId") || "Unknown";
    const dateTime = new Date().toLocaleString();

    for (let i = 0; i < totalPages; i++) {
      if (i > 0) doc.addPage();
      const pageData = filteredRecords.slice(
        i * recordsPerPage,
        (i + 1) * recordsPerPage
      );

      doc.setFontSize(16);
      doc.text("Daily Tea Delivery Summary Report", 14, 20);
      doc.autoTable({
        startY: 30,
        head: [[
          "Date",
          "Total Weight",
          "Sack Weight",
          "Water",
          "Withered",
          "Ripe",
          "Green Leaves",
          "Randalu",
        ]],
        body: pageData.map((row) => [
          row.deliveryDate,
          row.totalWeight,
          row.totalSackWeight,
          row.forWater,
          row.forWitheredLeaves,
          row.forRipeLeaves,
          row.greenTeaLeaves,
          row.randalu,
        ]),
      });

      doc.setFontSize(10);
      doc.text(`Report generated by: ${userId}`, 14, 280);
      doc.text(`Generated at: ${dateTime}`, 14, 285);
      doc.text(`Page ${i + 1} of ${totalPages}`, 170, 285);
    }

    doc.save(`daily_tea_delivery_report_${dateTime.replace(/[/:, ]/g, "_")}.pdf`);
    showSnackbar("PDF exported", "success");
  };

  const indexOfLastRecord = currentPage * recordsPerPage;
  const currentRecords = filteredRecords.slice(
    indexOfLastRecord - recordsPerPage,
    indexOfLastRecord
  );
  const totalPages = Math.ceil(filteredRecords.length / recordsPerPage);

  return (
    <EmployeeLayout>
      <div className="container mt-4 mb-5">
        <h2 className="mb-4 text-success">Daily Tea Delivery Report</h2>

        <div className="row g-3 align-items-end mb-4">
          <div className="col-md-3">
            <TextField
              label="From Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              value={fromDate}
              onChange={(e) => setFromDate(e.target.value)}
            />
          </div>
          <div className="col-md-3">
            <TextField
              label="To Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              value={toDate}
              onChange={(e) => setToDate(e.target.value)}
            />
          </div>
          <div className="col-md-auto">
            <Button variant="contained" color="success" onClick={handleFilter} startIcon={<FilterList />}>
              Filter
            </Button>
          </div>
          <div className="col-md-auto">
            <Button variant="outlined" color="warning" onClick={clearFilters} startIcon={<Clear />}>
              Clear
            </Button>
          </div>
          <div className="col-md-auto">
            <Button variant="contained" color="error" onClick={exportPDF} startIcon={<Download />}>
              Export as PDF
            </Button>
          </div>
        </div>

        <div className="table-responsive">
          <table className="table table-bordered table-striped">
            <thead className="table-success">
              <tr>
                <th>Date</th>
                <th>Total Weight</th>
                <th>Withered</th>
                <th>Ripe</th>
                <th>Green Leaves</th>
                <th>Randalu</th>
              </tr>
            </thead>
            <tbody>
              {currentRecords.length > 0 ? (
                currentRecords.map((row, i) => (
                  <tr key={i}>
                    <td>{new Date(row.deliveryDate).toISOString().split('T')[0]}</td>
                    <td>{row.totalWeight}</td>
                    <td>{row.forWitheredLeaves}</td>
                    <td>{row.forRipeLeaves}</td>
                    <td>{row.greenTeaLeaves}</td>
                    <td>{row.randalu}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="6" className="text-center">
                    No records found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="d-flex justify-content-between mt-3">
          <span>
            Page {currentPage} of {totalPages || 1}
          </span>
          <div>
            <Button
              variant="outlined"
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
            >
              Previous
            </Button>
            <Button
              variant="outlined"
              disabled={currentPage === totalPages || totalPages === 0}
              onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
              className="ms-2"
            >
              Next
            </Button>
          </div>
        </div>

        {/* Snackbar for feedback */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={3000}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert
            onClose={() => setSnackbar({ ...snackbar, open: false })}
            severity={snackbar.severity}
            sx={{ width: "100%" }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </div>
    </EmployeeLayout>
  );
};

export default DailyTeaDeliveryReport;
